services:
  app:
    build:
      context: .
      dockerfile: docker/production/Dockerfile
    restart: unless-stopped
    # ports:
    #   - "${APP_PORT:-80}:80"  # Disabled - using Traefik proxy
    volumes:
      # Mount specific directories and files for development
      - ./app:/var/www/html/app
      - ./config:/var/www/html/config
      - ./database:/var/www/html/database
      - ./resources:/var/www/html/resources
      - ./routes:/var/www/html/routes
      - ./bootstrap:/var/www/html/bootstrap
      - ./.env:/var/www/html/.env
      - ./composer.json:/var/www/html/composer.json
      - ./composer.lock:/var/www/html/composer.lock
      - ./package.json:/var/www/html/package.json
      - ./package-lock.json:/var/www/html/package-lock.json
      # Keep these from the built image
      - /var/www/html/vendor  # Use built vendor
      - /var/www/html/node_modules  # Use built node_modules
      - /var/www/html/public/build  # Use built assets
      # Storage and config
      - laravel-storage:/var/www/html/storage
      - ./.docker/nginx.prod.conf:/etc/nginx/sites-available/default
      - ./.docker/supervisord.prod.conf:/etc/supervisor/conf.d/supervisord.conf
    env_file:
      - .env.production
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=redis
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
    networks:
      - laravel
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.humfurie.loadbalancer.server.port=80"
      - "traefik.http.routers.humfurie.rule=Host(`humfurie.org`)"
      - "traefik.http.routers.humfurie.entrypoints=websecure"
      - "traefik.http.routers.humfurie.tls=true"
      - "traefik.http.routers.humfurie.tls.certresolver=letsencrypt"
      # - "traefik.http.routers.humfurie.middlewares=my-giam-traefik-plugin@file,my-souin@file"
      - "traefik.http.routers.humfurie-www.rule=Host(`www.humfurie.org`)"
      - "traefik.http.routers.humfurie-www.entrypoints=websecure"
      - "traefik.http.routers.humfurie-www.tls=true"
      - "traefik.http.routers.humfurie-www.tls.certresolver=letsencrypt"
      # - "traefik.http.routers.humfurie-www.middlewares=my-giam-traefik-plugin@file, my-souin@file"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    image: postgres:17
    restart: unless-stopped
    user: postgres
    # ports:
    #   - '${DB_PORT:-5432}:5432'  # Commented out for production security
    environment:
      POSTGRES_DB: '${DB_DATABASE}'
      POSTGRES_USER: '${DB_USERNAME}'
      POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - laravel
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    restart: unless-stopped
    networks:
      - laravel
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  ssr:
    build:
      context: .
      dockerfile: docker/production/Dockerfile
    restart: unless-stopped
    command: node /var/www/html/bootstrap/ssr/ssr.mjs
    working_dir: /var/www/html
    volumes:
      # Keep these from the built image - no mounts needed for production SSR
      - /var/www/html/node_modules  # Use built node_modules
      - /var/www/html/bootstrap/ssr  # Use built SSR bundle
    env_file:
      - .env.production
    environment:
      - APP_ENV=production
      - NODE_ENV=production
      - PORT=13714
    networks:
      - laravel
    depends_on:
      app:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "node -e \"require('http').get('http://localhost:13714', (r) => process.exit(r.statusCode === 200 ? 0 : 1))\"" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  laravel:
  proxy:
    external: true
    name: proxy

volumes:
  postgres-data:
  laravel-storage:
